# -*- coding: utf-8 -*-
# (c) 2014-2018 The mqttwarn developers
#
# mqttwarn configuration file for testing many details of the machinery.
#

; -------
; General
; -------

[defaults]


; ----
; MQTT
; ----

hostname     = 'localhost'
port         = 1883
username     = None
password     = None
clientid     = 'mqttwarn-testdrive'
lwt          = 'clients/mqttwarn-testdrive'
skipretained = False
cleansession = False

# MQTTv31 = 3   (default)
# MQTTv311 = 4
protocol     = 3


; -------
; Logging
; -------

; Send log output to STDERR
logfile   = 'stream://sys.stderr'

; Send log output to file
;logfile   = 'mqttwarn.log'

; one of: CRITICAL, DEBUG, ERROR, INFO, WARN
loglevel  = DEBUG

; optionally set the log level for filtered messages, defaults to INFO
;filteredmessagesloglevel = INFO

;logformat = '%(asctime)-15s %(levelname)-8s [%(name)-25s] %(message)s'

; --------
; Services
; --------

; path to file containing self-defined functions like `format` or `alldata`
; generate with "mqttwarn make-udf"
functions = 'tests/etc/functions_good.py'

; name the service providers you will be using.
launch    = log, file, tests.acme.foobar, tests/acme/foobar.py

[config:log]
targets = {
    'debug'  : [ 'debug' ],
    'info'   : [ 'info' ],
    'warn'   : [ 'warn' ],
    'crit'   : [ 'crit' ],
    'error'  : [ 'error' ],
    'invalid': [ 'invalid' ],
    'broken':  'broken'
  }

[config:file]
append_newline = True
targets = {
    'test-1'   : ['$TMPDIR/mqttwarn-test.01'],
    'test-2'   : ['$TMPDIR/mqttwarn-test.02'],
  }

[config:tests.acme.foobar]
targets = {
    'default'  : [ 'default' ],
  }

[config:tests/acme/foobar.py]
targets = {
    'default'  : [ 'default' ],
  }


; -------
; Targets
; -------

[test/log-1]
; echo '{"name": "temperature", "value": 42.42}' | mosquitto_pub -h localhost -t test/log-1 -l
targets = log:info
format = {name}: {value}

[test/log-2]
; Validate invoking the "foobar" function works.
targets = log:info
format = xform_func()

[test/log-unknown-func]
; Validate invoking an unknown function croaks.
targets = log:info
format = unknown_func()

[test/file-1]
; echo '{"name": "temperature", "value": 42.42}' | mosquitto_pub -h localhost -t test/file-1 -l
targets = file:test-1
format = {name}: {value}

[test/file-2]
; echo '{"item": "RÃ¤uber Hotzenplotz", "value": 42.42}' | mosquitto_pub -h localhost -t test/file-2 -l
targets = file:test-2
format = {item}

[test/plugin-module]
; echo '{"name": "temperature", "value": 42.42}' | mosquitto_pub -h localhost -t test/plugin-module -l
targets = tests.acme.foobar:default
format = {name}: {value}

[test/plugin-file]
; echo '{"name": "temperature", "value": 42.42}' | mosquitto_pub -h localhost -t test/plugin-file -l
targets = tests/acme/foobar.py:default
format = {name}: {value}

[test/datamap-1]
targets = log:info
datamap = datamap_dummy_v1()

[test/datamap-2]
targets = log:info
datamap = datamap_dummy_v2()

[test/alldata]
targets = log:info
alldata = alldata_dummy()

[test/filter-1]
targets = log:info
filter = filter_dummy_v1()

[test/filter-2]
targets = log:info
filter = filter_dummy_v2()

[test/targets-interpolated]
targets = log:{loglevel}
format  = Something {loglevel} happened! {message}

[test/targets-function-valid]
targets = get_targets_valid()

[test/targets-function-invalid]
targets = get_targets_invalid()

[test/targets-function-broken]
targets = get_targets_broken()

[test/targets-function-error]
targets = get_targets_error()

[test/template-1]
template = test.jinja
targets = log:info
